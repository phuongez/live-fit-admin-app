import React, { useEffect, useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Select,
  SelectTrigger,
  SelectContent,
  SelectItem,
} from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { useUser } from "@clerk/nextjs";

const CreateCustomerDialog = () => {
  const [open, setOpen] = useState(false);

  const [customerCode, setCustomerCode] = useState("");

  // C∆° s·ªü kh√°ch t·∫≠p
  const [branches, setBranches] = useState([]);
  const [branch, setBranch] = useState("ALL");

  useEffect(() => {
    const fetchBranches = async () => {
      const res = await fetch("/api/branches");
      const data = await res.json();
      setBranches(data);
    };
    fetchBranches();
  }, []);

  // State c·ªßa form
  const [fullName, setFullName] = useState("");
  const [dateOfBirth, setDateOfBirth] = useState("");
  const [gender, setGender] = useState("");
  const [type, setType] = useState("ADULT");
  const [phones, setPhones] = useState([
    { phone: "", label: "Ch√≠nh", isPrimary: true },
  ]);
  const [zaloPhone, setZaloPhone] = useState("");
  const [needs, setNeeds] = useState("");
  const [source, setSource] = useState("");
  const [guardianName, setGuardianName] = useState("");
  const [guardianPhone, setGuardianPhone] = useState("");
  const [guardianZalo, setGuardianZalo] = useState("");

  const [previewUrl, setPreviewUrl] = useState("");

  const [coaches, setCoaches] = useState([]);
  const [careCoach, setCareCoach] = useState("");
  const { user } = useUser();

  useEffect(() => {
    async function fetchCoaches() {
      const res = await fetch(`/api/members?branchId=${branch}`);
      const data = await res.json();
      setCoaches(data);
    }
    if (branch) fetchCoaches();
  }, [branch]);

  // Sau khi load user (ng∆∞·ªùi t·∫°o)
  useEffect(() => {
    if (user?.publicMetadata?.memberId) {
      setCareCoach(user.publicMetadata.memberId);
    }
  }, [user]);

  function handleAddPhone() {
    setPhones((prev) => [
      ...prev,
      { phone: "", label: "Ph·ª•", isPrimary: false },
    ]);
  }

  // S·ª≠a gi√° tr·ªã s·ªë ƒëi·ªán tho·∫°i theo index
  function handleChangePhone(index, value) {
    setPhones((prev) =>
      prev.map((p, i) => (i === index ? { ...p, phone: value } : p))
    );
  }

  // X√≥a 1 s·ªë ƒëi·ªán tho·∫°i
  function handleRemovePhone(index) {
    setPhones((prev) => prev.filter((_, i) => i !== index));
  }

  async function handleFileUpload(e) {
    const file = e.target.files[0];
    if (!file) return;

    const formData = new FormData();
    formData.append("file", file);
    formData.append("upload_preset", "unsigned_upload");

    const res = await fetch(
      "https://api.cloudinary.com/v1_1/ds30pv4oa/image/upload",
      { method: "POST", body: formData }
    );

    const data = await res.json();
    setPreviewUrl(data.secure_url);
  }

  async function captureFromDevice() {
    // Call API ƒë·∫øn thi·∫øt b·ªã nh·∫≠n di·ªán, l·∫•y ·∫£nh base64 ho·∫∑c URL
    const res = await fetch("/api/device/capture");
    const data = await res.json();
    setPreviewUrl(data.imageUrl);
  }

  // T·∫°o code t·ª± ƒë·ªông cho kh√°ch h√†ng
  useEffect(() => {
    async function fetchNextCode() {
      if (!branch) return;
      const res = await fetch(`/api/customers/next-code?branch=${branch}`);
      const data = await res.json();
      setCustomerCode(data.code);
    }
    fetchNextCode();
  }, [branch]);

  // X·ª≠ l√≠ api

  // Submit form
  async function handleSubmit(e) {
    e.preventDefault();

    const payload = {
      fullName,
      dateOfBirth,
      gender,
      type,
      code: customerCode,
      zaloPhone,
      needs,
      source,
      guardianName,
      guardianPhone,
      guardianZalo,
      branch,
      customerCode,
      avatarUrl: previewUrl,
      phones, // üëà g·ª≠i m·∫£ng phones l√™n API
      careCoachId: careCoach,
    };

    try {
      const res = await fetch("/api/customers", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });

      if (!res.ok) throw new Error("T·∫°o kh√°ch h√†ng th·∫•t b·∫°i");

      // N·∫øu th√†nh c√¥ng ‚Üí reset form + ƒë√≥ng dialog
      setOpen(false);
      setFullName("");
      setPhone("");
      setPreviewUrl("");
      // TODO: refresh b·∫£ng kh√°ch h√†ng
      console.log("Submitting customer:", body.branchId);
    } catch (err) {
      console.error(err);
      alert("C√≥ l·ªói x·∫£y ra khi t·∫°o kh√°ch h√†ng");
    }
  }

  return (
    <div>
      <Dialog open={open} onOpenChange={setOpen}>
        <DialogTrigger asChild>
          <Button className="bg-[#ffc634ff] text-black hover:opacity-90">
            + T·∫°o m·ªõi kh√°ch h√†ng
          </Button>
        </DialogTrigger>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Th√™m kh√°ch h√†ng m·ªõi</DialogTitle>
          </DialogHeader>
          <form className="grid grid-cols-2 gap-4 mt-4" onSubmit={handleSubmit}>
            <Input
              placeholder="H·ªç v√† t√™n"
              required
              value={fullName}
              onChange={(e) => setFullName(e.target.value)}
            />
            <Input
              type="date"
              placeholder="Ng√†y sinh"
              value={dateOfBirth}
              onChange={(e) => setDateOfBirth(e.target.value)}
            />
            <Select value={gender} onValueChange={setGender}>
              <SelectTrigger>
                {gender === "male" ? "Nam" : "N·ªØ" || "Gi·ªõi t√≠nh"}
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="male">Nam</SelectItem>
                <SelectItem value="female">N·ªØ</SelectItem>
              </SelectContent>
            </Select>
            <Select onValueChange={(val) => setType(val)} defaultValue={type}>
              <SelectTrigger>
                <span>{type === "ADULT" ? "Ng∆∞·ªùi l·ªõn" : "Tr·∫ª em"}</span>
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="ADULT">Ng∆∞·ªùi l·ªõn</SelectItem>
                <SelectItem value="CHILD">Tr·∫ª em</SelectItem>
              </SelectContent>
            </Select>
            <Select value={branch} onValueChange={setBranch}>
              <SelectTrigger>
                {branches.find((b) => b.id === branch)?.name ||
                  "Ch·ªçn chi nh√°nh"}
              </SelectTrigger>
              <SelectContent>
                {branches.map((b) => (
                  <SelectItem key={b.id} value={b.id}>
                    {b.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            <Select value={careCoach} onValueChange={setCareCoach}>
              <SelectTrigger>
                <span>
                  {coaches.find((c) => c.id === careCoach)?.fullName ||
                    "Ch·ªçn HLV ph·ª• tr√°ch"}
                </span>
              </SelectTrigger>
              <SelectContent>
                {coaches.map((c) => (
                  <SelectItem key={c.id} value={c.id}>
                    {c.fullName} ({c.role})
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            <div className="flex gap-2">
              {/* <label className="text-sm font-medium">M√£ KH: </label> */}
              <Input
                value={customerCode}
                readOnly
                placeholder="M√£ Kh√°ch h√†ng"
              />
            </div>
            {/* Ch·ªçn ·∫£nh ƒë·∫°i di·ªán */}
            <div className="col-span-2 space-y-2">
              <label className="text-sm font-medium">·∫¢nh ƒë·∫°i di·ªán</label>
              <Input type="file" accept="image/*" onChange={handleFileUpload} />
              <Button type="button" onClick={captureFromDevice}>
                Ch·ª•p t·ª´ thi·∫øt b·ªã nh·∫≠n di·ªán
              </Button>
              {previewUrl && (
                <img
                  src={previewUrl}
                  alt="Preview"
                  className="w-32 h-32 rounded-md"
                />
              )}
            </div>
            <div className="col-span-2 space-y-2">
              <label className="text-sm font-medium">S·ªë ƒëi·ªán tho·∫°i</label>
              {phones.map((p, index) => (
                <div key={index} className="flex gap-2 items-center">
                  <Input
                    placeholder={`S·ªë ƒëi·ªán tho·∫°i ${index + 1}`}
                    value={p.phone}
                    onChange={(e) => handleChangePhone(index, e.target.value)}
                  />
                  {index === 0 ? (
                    <span className="text-xs text-muted-foreground">
                      (Ch√≠nh)
                    </span>
                  ) : (
                    <Button
                      type="button"
                      size="sm"
                      variant="outline"
                      onClick={() => handleRemovePhone(index)}
                    >
                      X√≥a
                    </Button>
                  )}
                </div>
              ))}
              <Button
                type="button"
                variant="outline"
                size="sm"
                onClick={handleAddPhone}
                className="mt-2"
              >
                + Th√™m s·ªë ƒëi·ªán tho·∫°i
              </Button>
            </div>
            <Input
              placeholder="S·ªë ƒëi·ªán tho·∫°i Zalo"
              value={zaloPhone}
              onChange={(e) => setZaloPhone(e.target.value)}
            />
            <Input
              placeholder="Nhu c·∫ßu"
              value={needs}
              onChange={(e) => setNeeds(e.target.value)}
            />

            <Select value={source} onValueChange={setSource}>
              <SelectTrigger>
                <span>{source || "Ngu·ªìn kh√°ch h√†ng"}</span>
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="REFERRAL">Referral</SelectItem>
                <SelectItem value="HOTLINE">Hotline</SelectItem>
                <SelectItem value="CARE">Care</SelectItem>
                <SelectItem value="COACH">Coach</SelectItem>
                <SelectItem value="UID">UID</SelectItem>
                <SelectItem value="GOOGLE_ADS">Google Ads</SelectItem>
                <SelectItem value="TIKTOK_ADS">Tiktok Ads</SelectItem>
                <SelectItem value="WEBSITE">Website</SelectItem>
                <SelectItem value="FANPAGE">Fanpage</SelectItem>
              </SelectContent>
            </Select>
            <Input placeholder="T√™n gi√°m h·ªô (n·∫øu kh√°ch h√†ng l√† tr·∫ª nh·ªè)" />
            <Input placeholder="ƒêi·ªán tho·∫°i gi√°m h·ªô" />
            <Input placeholder="Zalo gi√°m h·ªô" />
            <div className="col-span-2 flex justify-end space-x-2 mt-4">
              <Button
                type="button"
                variant="outline"
                onClick={() => setOpen(false)}
              >
                H·ªßy
              </Button>
              <Button
                type="submit"
                className="bg-[#ffc634ff] text-black hover:opacity-90"
              >
                L∆∞u
              </Button>
            </div>
          </form>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default CreateCustomerDialog;
